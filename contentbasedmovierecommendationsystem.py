# -*- coding: utf-8 -*-
"""ContentBasedMovieRecommendationSystem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_EDtvkF-YygqkreEWon3b_Et2clt94sQ
"""

import numpy as np
import pandas as pd

credits= pd.read_csv('tmdb_5000_credits.csv')
movies=pd.read_csv('tmdb_5000_movies.csv')

credits.head()
credits=credits.rename(columns={'movie_id':'id'})

movies_df_merge=movies.merge(credits,on='id')
movies_df_merge=movies_df_merge.drop(columns=['homepage','title_x','title_y','status','production_companies'])

movies_df_merge.info()

movies_df_merge.head()['overview']

from sklearn.feature_extraction.text import TfidfVectorizer

tfv= TfidfVectorizer(min_df=3, max_features= None, strip_accents='unicode',analyzer='word', token_pattern='r\w{1,}',
                     ngram_range=(1,3), stop_words='english')

movies_df_merge['overview']=movies_df_merge['overview'].fillna('')

tfv_matrix= tfv.fit_transform(movies_df_merge['overview'])

tfv_matrix.shape

from sklearn.metrics.pairwise import sigmoid_kernel

sig= sigmoid_kernel(tfv_matrix,tfv_matrix)

sig[0]

indices=pd.Series(movies_df_merge.index,index=movies_df_merge['original_title']).drop_duplicates()

indices

def give_rec(title, sig=sig):
  idx=indices[title]
  sig_scores=list(enumerate(sig[idx]))
  sig_scores =sorted(sig_scores, key= lambda x: x[1], reverse=True)
  sig_scores=sig_scores[1:11]
  movie_indices=[i[0] for i in sig_scores]
  return movies_df_merge['original_title'].iloc[movie_indices]

give_rec('Avatar')